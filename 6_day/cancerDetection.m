function [Y,Xf,Af] = cancerDetection(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 08-Oct-2020 23:27:58.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 9xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.gain = [2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8452738403285533;-1.2775095720655698;-0.96677871910596402;-0.6936313998983582;0.21908390523199786;-0.22957506912069284;0.57089144230540489;-0.96963280104277816;-1.7742420249120316;-2.2592793883481788];
IW1_1 = [0.2365846507913193 1.2726470751361629 0.81311808154013998 -0.21159911431906164 0.062483676115371409 -0.33998086807193262 -0.030791532037534562 -0.8579447939041589 -0.1344514276462028;0.72353935693859472 0.40497959043657539 0.57975456158914074 0.54448536481358201 -0.17888614479027445 -0.53826861434451556 0.82777443401552264 -0.68981805723034384 0.82860564208989218;0.81872013532247323 -0.057130418539338645 0.49347216499204966 -0.99199469607301782 0.22524054965606374 0.092261504032915553 -0.044218362909874347 0.96708030581271254 -0.67707206638788364;-0.26502815485164599 -0.26686822623339546 -0.95600690580656145 -0.77257576714061948 0.32619158746108784 -0.71135649237764231 0.58200355432841344 -0.71091335687617074 0.66745800112256004;-0.5584748067863613 -0.82090974311473452 0.30115548023947492 -0.58431826960272282 -0.39569555221098662 0.85333129020762832 -0.3305766746381214 -0.87463876362633597 0.27440722781708138;-0.88568445011220587 0.51276153841223426 0.0053355034993527832 -0.33702614734818459 -0.1973239817756835 1.2021423782596232 0.55050485843193631 0.16882994129446965 -0.36865201152167898;0.2638526863318732 -0.73062771168160578 0.60686286056170924 0.41873028967716708 -0.76659001187090758 -0.9655429972132239 -0.050340882856686378 0.50894085556419644 -0.63051003457392518;-0.93925537354732724 -0.85492155091720989 0.27664185685751952 0.59247316015707163 0.96787641669113789 0.43716542483597026 0.061848005208668254 0.34868798278709578 -0.18253831180359981;-0.66391959018486357 0.14373770619478546 0.60887264854896339 -0.94103949534999587 -0.59362773234886534 -0.90033433182028266 -0.14067091080005323 -0.59137472155389348 -0.090225398903142739;-1.0482024175884888 -0.93475855888613668 -0.32189926472393365 0.0095896167649441866 -0.48733928846823055 -0.52193282468283597 -0.14738960140357543 -0.2415882990145295 -0.60649644441188522];

% Layer 2
b2 = [-0.12073029458710216;-0.40331329134339666];
LW2_1 = [0.081119679677236281 -0.49977320854039237 -0.64968881811208745 0.28471960177500294 0.71145952110778521 -0.032820677783238446 0.22233155051166753 0.89426357540664891 0.94024242682090153 0.8910193858839327;-0.44972935078176723 0.43498422277456139 -0.2658176083893285 -0.51997601336849719 0.9026198117137858 0.18107227054839975 -0.83865485346727697 0.67766017485662644 -0.78326530996868848 -1.6572816990748067];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
